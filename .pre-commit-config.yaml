---

# Configuration of git pre-commit hooks:
#       https://pre-commit.com/
#
# In a newly cloned git repo, run the following commands to install the
# pre-commit hooks into .git/hooks/pre-commit:
#       pip3 install pre-commit
#       pre-commit install
#
# After that, `git commit` will automatically run the pre-commit hooks.
#
# Run all checks:
#       pre-commit run --all
#
# Run pylint check for src/base/python/*.py:
#       pre-commit run pylint --files src/base/python/*.py
#
# Run all checks for src/base/python/*.py:
#       pre-commit run --files src/base/python/*.py


# Skip pre-commit hooks:
#
# In some situations, for example, when fixing legacy codes, it is desirable to
# skip pre-commit hooks.  You can do so via the -n option of git-commit, as the
# follows:
#       git commit -n
# However, please DO NOT use this unless you absolutely have to.


# Exclude certain files from being inspected and processed by the pre-commit
# hooks (linters and formatters).  Common reasons for exclusion are summarized
# by the following guideline:
#       1.  Not maintained by us.  Such codes are copy-pasted directly and are
#           known to be copy-pastable in the foreseeable future.  We will never
#           invest time in maintaining them.  However, if situation changes and
#           we do need to maintain these codes, we have to start imposing our
#           standards.
#       2.  A third party code base that we modify.  Such third party code bases
#           usually have their own coding standards.  We should not impose our
#           standards on those code bases.
#       3.  Generated files.  For example, various protbuf-generated files.
#           These files are completely out of our control.  We will never look
#           at these codes directly either.
#       4.  Maybe some other complelling reasons.
# Despite these general guidelines, there may be special cases.  We should
# analyze each case individually and make the most informed decisions instead of
# blindly following the guideline.
exclude: >
    (?x)^(
        .*_pb2(_grpc)?\.py|     # Generated protobuf and grpc files.
        tools/cpp/.*|           # Bazel cpp tools.
        third_party/.*|         # Third party source codes.
    )$

repos:
    - repo: https://github.com/pre-commit/pre-commit-hooks
      rev: v1.2.3
      hooks:
          # Both end-of-file-fixer and trailing-whitespace are integrated into
          # the purify-text hook.  Keeping these two here commented to allow
          # easy fallback in case of failure.
          #- id: end-of-file-fixer
          #  name: end-of-file-fixer (add new-line character at EOF)
          #- id: trailing-whitespace
          #  name: trailing-whitespace (remove trailing white spaces)

          - id: name-tests-test
            name: name-tests-test (python tests conform to *_test.py)
            exclude: ^tests/__configure.*py$
          - id: forbid-new-submodules
            name: forbid-new-submodules
          - id: check-added-large-files
            name: check-added-large-files (use git-lfs instead)
          - id: check-case-conflict
            name: check-case-conflict (unsafe for case-insensitive fs)
          - id: check-executables-have-shebangs
            name: check-executables-have-shebangs
          - id: check-symlinks
            name: check-symlinks (no broken symlinks)
          - id: check-xml
            name: check-xml (validate xml files)
          - id: detect-private-key
            name: detect-private-key (do not check in private keys)
          - id: file-contents-sorter
            name: file-contents-sorter (sort text files)
          - id: no-commit-to-branch
            name: no-commit-to-branch (use pull request instead)
            args:
                - -b
                # TODO (zhongming): Change back to master once the migration is
                # completed.
                - master-lfs
          - id: double-quote-string-fixer
            name: double-quote-string-fixer (remove extraneous quotes)

    - repo: https://github.com/pre-commit/mirrors-eslint
      rev: v5.0.0-alpha.2
      hooks:
          - id: eslint
            name: eslint (auto-fix and lint javascript files)
            args:
                - --color
                - --fix
            additional_dependencies:
                # TODO (zhongming): Do these extra dependencies have to be
                # specified manually like this?
                - eslint@4.15.0
                - eslint-config-google@0.7.1
                - eslint-loader@1.6.1
                - eslint-plugin-react@6.10.3
                - babel-eslint@6.1.2

    # Use local hooks to ensure correct configuration.
    # TODO (zhongming): Eventually migrate to remote hooks and custom hooks when
    # the technologies mature.  Using local hooks adds burden to the host
    # environment setup.
    - repo: local
      hooks:
          # Use clang-format to auto format source files.
          #         https://clang.llvm.org/docs/ClangFormatStyleOptions.html
          #
          # For all programming languages, the configuration file is:
          #         .clang-format
          #
          # clang-format is capable of formatting more source files for many
          # programming languages.
          #
          # How to install clang-format:
          #     macOS
          #         Install XCode and the command line tools via:
          #              xcode-select --install
          #     ubuntu
          #         Install from http://releases.llvm.org/download.html by
          #         executing the 'clang' ansible role:
          #             ./setup
          #         This ./setup will have to donwload a 270MB file and extract
          #         it locally under /tmp.  Because of this, it may take a while
          #         to complete.
          - id: clang-format-cc
            name: clang-format-cc (format cpp code)
            entry: clang-format -i
            language: system
            types: [c++]
          - id: clang-format-java
            name: clang-format-java (format java code)
            entry: clang-format -i
            language: system
            types: [java]
          - id: clang-format-proto
            name: clang-format-proto (format protobuf code)
            entry: clang-format -i
            language: system
            files: \.proto$

          # `yapf -i` formats the source file in-place but does not provide any
          # diagnostics.  `pylint` provides diagnostics but does not format the
          # code directly.  yapf should precede pylint to enable the best
          # developer experience and coding quality.
          #
          # Running the following checks requires the host system to have the
          # following python3 packages installed via pip3:
          #       pip3 install -U pylint yapf
          - id: yapf
            name: yapf (format python code)
            entry: python3 -m yapf -i
            language: system
            types: [python]
          - id: pylint
            name: pylint (lint python code)
            entry: python3 -m pylint --rcfile=.pylintrc
            language: system
            types: [python]

          # Lint bash scripts.
          #
          # Bash is the only supported shell.  Everything is tuned to work with
          # bash.  They may still work to some extent with other shells.  But
          # use at your own peril!
          #
          # On macos, shellcheck is installed via:
          #       brew install shellcheck
          #
          # For more information, see:
          #       https://github.com/koalaman/shellcheck
          - id: shellcheck
            name: shellcheck (shell scripts)
            entry: shellcheck --shell=bash
            language: system
            types: [bash]

          # Lint typescript.
          #
          # This requires installing the proper version of the typescript
          # compiler and the typescript linter tslint:
          #       npm install -g typescript tslint
          - id: tslint
            name: tslint (lint typescript files)
            entry: tslint -c .tslintrc.json
            language: system
            types: [ts]

          # Lint plain yaml files.
          #
          # See more information at:
          #     https://github.com/adrienverge/yamllint
          #
          # This linter lints both .yaml and .yml files.  .yml files are ansible
          # scripts by convention and are linted by ansible-lint again.
          #
          # If you want to disable specific checks in a file or for a line,
          # consult the page below:
          # yamllint disable-line rule:line-length
          #     http://yamllint.readthedocs.io/en/stable/disable_with_comments.html#
          - id: yamllint
            name: yamllint (lint yaml, .yaml and .yml, files)
            entry: yamllint -c .yamllint.yaml
            language: system
            types: [yaml]

          # Lint ansible scripts.
          #
          # More information about the linter:
          #       https://github.com/willthames/ansible-lint
          #
          # By convention, ansible yaml scripts have .yml extension name,
          # whereas regular yaml files have the .yaml extension name.
          #
          # Note that ansible scripts, i.e., .yml files, are linted twice.  Once
          # by yamllint, then by ansible-lint.
          - id: ansible-lint
            name: ansible-lint (lint ansible .yml files)
            entry: ansible-lint --force-color -c .ansible-lint
            language: system
            files: \.yml$

          # Purify text files.
          #
          # This hook combines the EOF-fixer, trailing-whitespace, and converts
          # to UNIX new-line charaters.
          #
          # When running against an empty file, it does not append the new-line
          # character to EOF.
          - id: purify-text
            name: purify-text
            entry: ./git_hooks/purify_text.py
            language: python
            types: [text]

          # Lint json scripts.
          #
          # Custom json linter written in python3.
          - id: json-lint
            name: json-lint (lint json files)
            entry: ./git_hooks/json_lint.py --indent 4
            language: python
            types: [json]

          # Remove editor specific lines from source codes.
          #
          # Custom json linter written in python3.
          - id: remove-modeline
            name: remove-modeline
            entry: ./git_hooks/remove_modeline.py
            language: python
            types: [python]

          # Checkstyle is a code analyzer for java:
          #
          # Run the stylechecker from the command line following the
          # instructions here:
          #         http://checkstyle.sourceforge.net/cmdline.html
          #
          # The checkstyle program always returns 0.  We have to write a
          # separate script to count the number of ERROR and WARN to signal
          # errors.
          - id: checkstyle
            name: checkstyle (lint java code)
            entry: ./git_hooks/checkstyle.py -c .checkstyle.xml
            language: python
            types: [java]

          # Check for files that are not tracked by bazel.
          - id: check-bazel-source
            name: check-bazel-source
            entry: ./git_hooks/check_bazel_source.py
            language: python

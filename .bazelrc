#                       Generic Build Configurations
#
# Always allow color.  Note that this does mean that the test logs will preserve
# the ANSI color escape sequences.  To preserve color while viewing them, use
# `less -r`.
build --color=yes
# '--jobs=auto' uses the number of processors.  But I want the number of
# threads.
build --jobs=8
# Upon failure, print the failure message and the command executed.
build --verbose_failures
# Don't update the progress bar too frequently.  That actually slows down the
# build significantly.
build --show_progress_rate_limit=1.0
# Dump the explanation, in verbose manner to a file named bazel-buildlogs.
build --explain=bazel-buildlogs
build --verbose_explanations
# Do not inherit environment variables to ensure fully hermetic build.
build --experimental_strict_action_env
run --experimental_strict_action_env
test --experimental_strict_action_env

#                       Custom C/C++ Toolchain
#
# Using --cpu=clang will choose the custom toolchain named 'linux_clang' in the
# tools/cpp/CROSSTOOL file.  The object files are linked against the clang
# library located at /opt/clang/5.0/lib.  You must add it to LD_LIBRARY_PATH
# before running the binary.
build --crosstool_top=//tools/cpp:toolchain --cpu=clang


#                       Enable clang-tidy and More
#
# Prepare to perform static analysis while compiling C++ code.
# Pre-requisite:
#       sudo pip3 install protobuf
# It is hard coded to ignore all source files under third_party/.
#
#
# Why is this useful and how to use it?
#
#       This enables a few extremely useful C/C++ source code tools such as
#       clang-tidy.  Those tools require the complete compile command as input.
#       This listener stores the serialized protobuf data into a bazel build
#       directory.  Then running the following command
#           tools/code_style/gen_cpp_db/gen_cpp_db.py
#       generates compile_commands.json, which can be fed to those clang-*
#       tools to batch process.
#
#
# Why not turn this on by default?
#
#       Turning this on has a significant, 20% or more, penalty on performance.
#       The ideal place to turn on this option is in a CI system that
#       continuously performs various checks and optimizations on source code.
#
#
#build --experimental_action_listener=tools/code_style/gen_cpp_db:gen_cxx_cmd_listener


#                   LLVM clang Sanitizers
#
#
# The sanitizers rely on the existence of `llvm-symbolizer` in the $PATH.
# Using clang-4.0 on Ubuntu 17.04, this usually means:
#       sudo apt install clang
#       sudo ln -s usr/bin/llvm-symbolizer-4.0 usr/bin/llvm-symbolizer
#
# If you use a custom clang based toolchain, make sure to use the
# llvm-symbolizer shipped with your toolchain.
#
#
# Here only asan, msan, and tsan are configured.
#
# To enable different build mode, e.g., tsan, add --config=tsan to the bazel
# build command.

# Build the cpp code using the LLVM Address Sanitizer:
#       https://clang.llvm.org/docs/AddressSanitizer.html
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -fno-omit-frame-pointer
build:asan --copt -O1
build:asan --copt -g
build:asan --linkopt -fsanitize=address
build:asan --action_env=ASAN_OPTIONS=check_initialization_order=1


# Build the cpp code using the LLVM Memory Sanitizer:
#       https://clang.llvm.org/docs/MemorySanitizer.html
#
# If you find the output of the Msan hard to understand, please ensure that
# `llvm-symbolizer` is available in the PATH environment variable.
build:msan --strip=never
build:msan --copt -fsanitize=memory
build:msan --copt -fsanitize-memory-track-origins
build:msan --copt -fsanitize-memory-use-after-dtor
build:msan --copt -fno-omit-frame-pointer
build:msan --copt -O2
build:msan --copt -g
build:msan --linkopt -fsanitize=memory
build:msan --action_env=MSAN_OPTIONS=poison_in_dtor=1


# Build the cpp code using the LLVM Thread Sanitizer:
#       https://clang.llvm.org/docs/ThreadSanitizer.html
build:tsan --strip=never
build:tsan --copt -fsanitize=thread
build:tsan --copt -O1
build:tsan --copt -g
build:tsan --linkopt -fsanitize=thread


# Build the cpp code with code coverage instrumentation.
#       https://clang.llvm.org/docs/SourceBasedCodeCoverage.html
build:cov --copt -fcoverage-mapping
build:cov --copt -fprofile-instr-generate
build:cov --linkopt -fcoverage-mapping
build:cov --linkopt -fprofile-instr-generate


#                   Python3 Toolchain
build --python_top=tools/python:py-3


#                   Protobuf Toolchains
build --proto_compiler=//third_party/protobuf:protoc
build --proto_toolchain_for_cc=//third_party/protobuf:cc_toolchain
build --proto_toolchain_for_java=//third_party/protobuf:java_toolchain
